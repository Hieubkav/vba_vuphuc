<?php

namespace Database\Seeders;

use Illuminate\Database\Seeder;
use App\Models\Course;
use App\Models\Student;
use Carbon\Carbon;

class CourseStudentSeeder extends Seeder
{
    /**
     * Run the database seeds.
     */
    public function run(): void
    {
        $this->command->info('üë• T·∫°o d·ªØ li·ªáu ƒëƒÉng k√Ω kh√≥a h·ªçc...');

        $courses = Course::all();
        $students = Student::all();
        $enrollmentCount = 0;

        foreach ($courses as $course) {
            // M·ªói kh√≥a h·ªçc c√≥ 5-15 h·ªçc vi√™n ƒëƒÉng k√Ω
            $numEnrollments = rand(5, 15);
            $selectedStudents = $students->random($numEnrollments);

            foreach ($selectedStudents as $student) {
                // Ki·ªÉm tra xem ƒë√£ ƒëƒÉng k√Ω ch∆∞a
                if (!$course->students()->where('student_id', $student->id)->exists()) {
                    $enrolledAt = Carbon::now()->subDays(rand(1, 90));
                    $progress = rand(0, 100);
                    $status = $this->getEnrollmentStatus($progress);
                    
                    $completedAt = null;
                    if ($status === 'completed') {
                        $completedAt = $enrolledAt->copy()->addDays(rand(30, 60));
                    }

                    $course->students()->attach($student->id, [
                        'enrolled_at' => $enrolledAt,
                        'completed_at' => $completedAt,
                        'status' => $status,
                        'progress_percentage' => $progress,
                        'total_study_hours' => rand(10, 100),
                        'final_score' => $status === 'completed' ? rand(70, 100) : null,
                        'notes' => $this->getRandomNote(),
                        'completion_data' => json_encode([
                            'assignments_completed' => rand(5, 20),
                            'quizzes_passed' => rand(3, 10),
                            'projects_submitted' => rand(1, 5),
                        ]),
                        'created_at' => $enrolledAt,
                        'updated_at' => $completedAt ?? $enrolledAt,
                    ]);
                    
                    $enrollmentCount++;
                }
            }
        }

        $this->command->info("‚úÖ ƒê√£ t·∫°o {$enrollmentCount} ƒëƒÉng k√Ω kh√≥a h·ªçc");
    }

    private function getEnrollmentStatus(int $progress): string
    {
        if ($progress >= 100) {
            return 'completed';
        } elseif ($progress >= 50) {
            return 'in_progress';
        } elseif ($progress > 0) {
            return 'in_progress';
        } else {
            return 'enrolled';
        }
    }

    private function getRandomNote(): string
    {
        $notes = [
            'H·ªçc vi√™n t√≠ch c·ª±c v√† c√≥ ti·∫øn b·ªô t·ªët',
            'C·∫ßn h·ªó tr·ª£ th√™m v·ªÅ ph·∫ßn VBA n√¢ng cao',
            'Ho√†n th√†nh xu·∫•t s·∫Øc c√°c b√†i t·∫≠p',
            'Th∆∞·ªùng xuy√™n tham gia th·∫£o lu·∫≠n',
            'C√≥ kinh nghi·ªám th·ª±c t·∫ø t·ªët',
            'C·∫ßn c·∫£i thi·ªán k·ªπ nƒÉng debug',
            'R·∫•t nhi·ªát t√¨nh trong h·ªçc t·∫≠p',
            'ƒê√£ √°p d·ª•ng ƒë∆∞·ª£c v√†o c√¥ng vi·ªác th·ª±c t·∫ø',
            'H·ªçc vi√™n c√≥ n·ªÅn t·∫£ng IT t·ªët',
            'C·∫ßn th√™m th·ªùi gian ƒë·ªÉ ho√†n th√†nh',
        ];

        return $notes[array_rand($notes)];
    }
}
